#lang racket
(define (number-of char)
  (cond
    ((equal? char #\A) 0)
    ((equal? char #\B) 1)
    ((equal? char #\C) 2)
    ((equal? char #\D) 3)
    ((equal? char #\E) 4)
    ((equal? char #\F) 5)
    ((equal? char #\G) 6)
    ((equal? char #\H) 7)
    ((equal? char #\I) 8)
    ((equal? char #\J) 9)
    ((equal? char #\K) 10)
    ((equal? char #\L) 11)
    ((equal? char #\M) 12)
    ((equal? char #\N) 13)
    ((equal? char #\O) 14)
    ((equal? char #\P) 15)
    ((equal? char #\Q) 16)
    ((equal? char #\R) 17)
    ((equal? char #\S) 18)
    ((equal? char #\T) 19)
    ((equal? char #\U) 20)
    ((equal? char #\V) 21)
    ((equal? char #\W) 22)
    ((equal? char #\X) 23)
    ((equal? char #\Y) 24)
    ((equal? char #\Z) 25)
    ((equal? char #\a) 26)
    ((equal? char #\b) 27)
    ((equal? char #\c) 28)
    ((equal? char #\d) 29)
    ((equal? char #\e) 30)
    ((equal? char #\f) 31)
    ((equal? char #\g) 32)
    ((equal? char #\h) 33)
    ((equal? char #\i) 34)
    ((equal? char #\j) 35)
    ((equal? char #\k) 36)
    ((equal? char #\l) 37)
    ((equal? char #\m) 38)
    ((equal? char #\n) 39)
    ((equal? char #\o) 40)
    ((equal? char #\p) 41)
    ((equal? char #\q) 42)
    ((equal? char #\r) 43)
    ((equal? char #\s) 44)
    ((equal? char #\t) 45)
    ((equal? char #\u) 46)
    ((equal? char #\v) 47)
    ((equal? char #\w) 48)
    ((equal? char #\x) 49)
    ((equal? char #\y) 50)
    ((equal? char #\z) 51)
    ((equal? char #\0) 52)
    ((equal? char #\1) 53)
    ((equal? char #\2) 54)
    ((equal? char #\3) 55)
    ((equal? char #\4) 56)
    ((equal? char #\5) 57)
    ((equal? char #\6) 58)
    ((equal? char #\7) 59)
    ((equal? char #\8) 60)
    ((equal? char #\9) 61)
    ((equal? char #\+) 62)
    ((equal? char #\/) 63)
    (else 0)))

(define (Base64->number file)
  (let converter ((chars (string->list
                           (file->string file)))
                  (building-number 0)
                  (position 0))
    (if (empty? chars)
      building-number
      (converter (rest chars)
                 (+ building-number
                    (* (expt 64 position)
                       (number-of (first chars))))
                 (add1 position)))))

(define file (command-line #:args (f) 
                           (if (equal? f "-")
                             "/dev/stdin"
                             f)))
(Base64->number file)
